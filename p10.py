# -*- coding: utf-8 -*-
"""p10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pj0A9ECvts36b-wIXRQ21YgtUgxdpsXn
"""

def evaluate_postfix(expression):
    stack = []
    tokens = expression.split()

    for token in tokens:
        if token.isdigit():
            stack.append(int(token))
        else:
            b = stack.pop()
            a = stack.pop()
            if token == '+':
                stack.append(a + b)
            elif token == '-':
                stack.append(a - b)
            elif token == '*':
                stack.append(a * b)
            elif token == '/':
                stack.append(a / b)

    return stack[0]

# Contoh:
expr = "3 4 + 2 *"
print("Hasil postfix:", evaluate_postfix(expr))  # Output: 14

from collections import deque
import time

class BankQueue:
    def __init__(self):
        self.queue = deque()
        self.arrival_times = {}

    def tambah_pelanggan(self, nama):
        self.queue.append(nama)
        self.arrival_times[nama] = time.time()
        print(f"{nama} ditambahkan ke antrian.")

    def layani_pelanggan(self):
        if self.queue:
            nama = self.queue.popleft()
            wait_time = time.time() - self.arrival_times.pop(nama)
            print(f"{nama} telah dilayani. Waktu tunggu: {wait_time:.2f} detik.")
            return wait_time
        else:
            print("Antrian kosong.")
            return 0

    def tampilkan_antrian(self):
        print("Status Antrian:", list(self.queue))

    def rata_rata_waktu_tunggu(self, total_pelayanan):
        if total_pelayanan:
            rata_rata = total_pelayanan / total_pelayanan_count
            print(f"Rata-rata waktu tunggu: {rata_rata:.2f} detik.")
        else:
            print("Belum ada pelanggan yang dilayani.")

# Simulasi
bank = BankQueue()
bank.tambah_pelanggan("Ayu")
time.sleep(1)
bank.tambah_pelanggan("Budi")
time.sleep(1)

total_waktu = 0
total_pelayanan_count = 0

total_waktu += bank.layani_pelanggan()
total_pelayanan_count += 1
time.sleep(1)
total_waktu += bank.layani_pelanggan()
total_pelayanan_count += 1

bank.rata_rata_waktu_tunggu(total_waktu)

class Kontak:
    def __init__(self, nama, nomor):
        self.nama = nama
        self.nomor = nomor
        self.next = None

class DaftarKontak:
    def __init__(self):
        self.head = None

    def tambah_kontak(self, nama, nomor):
        kontak_baru = Kontak(nama, nomor)
        kontak_baru.next = self.head
        self.head = kontak_baru
        print(f"Kontak {nama} ditambahkan.")

    def hapus_kontak(self, nama):
        prev = None
        current = self.head
        while current:
            if current.nama == nama:
                if prev:
                    prev.next = current.next
                else:
                    self.head = current.next
                print(f"Kontak {nama} dihapus.")
                return
            prev = current
            current = current.next
        print(f"Kontak {nama} tidak ditemukan.")

    def cari_kontak(self, nama):
        current = self.head
        while current:
            if current.nama == nama:
                print(f"Ditemukan: {current.nama} - {current.nomor}")
                return
            current = current.next
        print(f"Kontak {nama} tidak ditemukan.")

    def tampilkan_kontak(self):
        current = self.head
        if not current:
            print("Daftar kontak kosong.")
            return
        print("Daftar Kontak:")
        while current:
            print(f"{current.nama} - {current.nomor}")
            current = current.next

# Contoh Penggunaan
daftar = DaftarKontak()
daftar.tambah_kontak("Andi", "0812345678")
daftar.tambah_kontak("Budi", "0898765432")
daftar.tampilkan_kontak()
daftar.cari_kontak("Andi")
daftar.hapus_kontak("Budi")
daftar.tampilkan_kontak()