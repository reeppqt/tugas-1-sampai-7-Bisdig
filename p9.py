# -*- coding: utf-8 -*-
"""p9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14Bj_alah7GvqQ6V6vTDCX4WFGj_pgS92
"""

# Struktur Node
class Node:
    def __init__(self, data):
        self.data = data  # Menyimpan data
        self.next = None  # Penunjuk ke node berikutnya

# Struktur Linked List
class LinkedList:
    def __init__(self):
        self.head = None  # Kepala dari linked list

    # Tambah node di akhir (append)
    def append(self, data):
        new_node = Node(data)
        if self.head is None:  # Jika list kosong
            self.head = new_node
            return
        last = self.head
        while last.next:
            last = last.next
        last.next = new_node

    # Tambah node di awal (prepend)
    def prepend(self, data):
        new_node = Node(data)
        new_node.next = self.head
        self.head = new_node

    # Tambah node setelah node tertentu
    def insert_after_node(self, prev_node_data, data):
        current = self.head
        while current and current.data != prev_node_data:
            current = current.next
        if not current:
            print("Node sebelumnya tidak ditemukan.")
            return
        new_node = Node(data)
        new_node.next = current.next
        current.next = new_node

    # Hapus node berdasarkan data
    def delete_node(self, key):
        current = self.head

        # Jika node yang dihapus adalah head
        if current and current.data == key:
            self.head = current.next
            current = None
            return

        prev = None
        while current and current.data != key:
            prev = current
            current = current.next

        if current is None:
            print("Node tidak ditemukan.")
            return

        prev.next = current.next
        current = None

    # Cetak isi linked list
    def print_list(self):
        current = self.head
        while current:
            print(current.data, end=" -> ")
            current = current.next
        print("None")


# Contoh penggunaan
if __name__ == "__main__":
    ll = LinkedList()
    ll.append(10)
    ll.append(20)
    ll.prepend(5)
    ll.insert_after_node(10, 15)
    print("Linked List setelah penambahan:")
    ll.print_list()

    ll.delete_node(20)
    print("Linked List setelah penghapusan 20:")
    ll.print_list()

def print_array(arr):
    print("Isi array:")
    for i, val in enumerate(arr):
        print(f"arr[{i}] = {val}")

def tambah_nilai(arr, nilai):
    for i in range(len(arr)):
        arr[i] += nilai

# Simulasi pointer ke array
def main():
    arr = [10, 20, 30, 40, 50]
    print("Sebelum dimodifikasi:")
    print_array(arr)

    # arr 'dikirim' sebagai referensi (mirip pointer)
    tambah_nilai(arr, 5)

    print("\nSetelah ditambah 5:")
    print_array(arr)

if __name__ == "__main__":
    main()

def print_array(arr, label="Array"):
    print(f"{label}: ", end='')
    print(' '.join(str(x) for x in arr))

def tambah_semua(arr, nilai):
    for i in range(len(arr)):
        arr[i] += nilai

def tukar_elemen(arr, idx1, idx2):
    arr[idx1], arr[idx2] = arr[idx2], arr[idx1]

def cari_maksimum(arr):
    maks = arr[0]
    for val in arr:
        if val > maks:
            maks = val
    return maks

def cari_minimum(arr):
    minimum = arr[0]
    for val in arr:
        if val < minimum:
            minimum = val
    return minimum

def salin_array(arr):
    # Deep copy (tidak terhubung ke array asli)
    return arr.copy()

def main():
    # Simulasi pointer ke array (referensi)
    arr = [10, 5, 30, 25, 15]
    print_array(arr, "Awal")

    # Tambah nilai ke semua elemen
    tambah_semua(arr, 5)
    print_array(arr, "Setelah tambah 5")

    # Tukar elemen pertama dan terakhir
    tukar_elemen(arr, 0, len(arr) - 1)
    print_array(arr, "Setelah tukar elemen [0] dan [-1]")

    # Cari maksimum dan minimum
    maks = cari_maksimum(arr)
    mins = cari_minimum(arr)
    print(f"Maksimum = {maks}, Minimum = {mins}")

    # Salin array
    arr_copy = salin_array(arr)
    print_array(arr_copy, "Salinan Array")

    # Modifikasi salinan, pastikan original tidak berubah
    arr_copy[0] = 999
    print_array(arr_copy, "Salinan Setelah Diubah")
    print_array(arr, "Asli Tetap Tidak Berubah")

if __name__ == "__main__":
    main()

class Contact:
    def __init__(self, nama, telepon):
        self.nama = nama
        self.telepon = telepon

    def __str__(self):
        return f"{self.nama} - {self.telepon}"

class ContactManager:
    def __init__(self):
        self.kontak_list = []  # Alokasi dinamis via list

    def tambah_kontak(self, nama, telepon):
        kontak_baru = Contact(nama, telepon)
        self.kontak_list.append(kontak_baru)
        print("✅ Kontak berhasil ditambahkan.\n")

    def tampilkan_kontak(self):
        if not self.kontak_list:
            print("📭 Belum ada kontak.\n")
            return
        print("📒 Daftar Kontak:")
        for idx, kontak in enumerate(self.kontak_list, 1):
            print(f"{idx}. {kontak}")
        print()

    def cari_kontak(self, keyword):
        hasil = [k for k in self.kontak_list if keyword.lower() in k.nama.lower()]
        if not hasil:
            print("🔍 Kontak tidak ditemukan.\n")
        else:
            print("🔎 Hasil pencarian:")
            for k in hasil:
                print(f"- {k}")
            print()

    def hapus_kontak(self, nama):
        for k in self.kontak_list:
            if k.nama.lower() == nama.lower():
                self.kontak_list.remove(k)
                print("🗑️ Kontak berhasil dihapus.\n")
                return
        print("❌ Kontak tidak ditemukan.\n")

def main():
    manager = ContactManager()

    while True:
        print("=== Dynamic Contact Manager ===")
        print("1. Tambah Kontak")
        print("2. Tampilkan Semua Kontak")
        print("3. Cari Kontak")
        print("4. Hapus Kontak")
        print("5. Keluar")

        pilihan = input("Pilih menu (1-5): ")

        if pilihan == '1':
            nama = input("Masukkan Nama: ")
            telepon = input("Masukkan No. Telepon: ")
            manager.tambah_kontak(nama, telepon)

        elif pilihan == '2':
            manager.tampilkan_kontak()

        elif pilihan == '3':
            keyword = input("Masukkan nama yang dicari: ")
            manager.cari_kontak(keyword)

        elif pilihan == '4':
            nama = input("Masukkan nama kontak yang akan dihapus: ")
            manager.hapus_kontak(nama)

        elif pilihan == '5':
            print("👋 Keluar dari program.")
            break

        else:
            print("❗ Pilihan tidak valid. Coba lagi.\n")

if __name__ == "__main__":
    main()

import sys

class DynamicStack:
    def __init__(self):
        self.stack = []

    def push(self, data):
        self.stack.append(data)
        print(f"✅ Data '{data}' ditambahkan ke stack.\n")

    def pop(self):
        if not self.stack:
            print("⚠️ Stack kosong! Tidak bisa pop.\n")
        else:
            removed = self.stack.pop()
            print(f"🗑️ Data '{removed}' dihapus dari stack.\n")

    def tampilkan(self):
        if not self.stack:
            print("📭 Stack kosong.\n")
        else:
            print("📦 Isi Stack (Top → Bottom):")
            for item in reversed(self.stack):
                print(f"- {item}")
            print()

    def monitor_memori(self):
        jumlah = len(self.stack)
        total_bytes = sum(sys.getsizeof(item) for item in self.stack)
        print(f"📊 Monitoring Memori:")
        print(f"- Jumlah elemen: {jumlah}")
        print(f"- Estimasi total ukuran data: {total_bytes} byte\n")


def main():
    stack = DynamicStack()

    while True:
        print("=== Aplikasi Dynamic Stack ===")
        print("1. Push")
        print("2. Pop")
        print("3. Tampilkan Stack")
        print("4. Monitor Memori")
        print("5. Keluar")

        pilihan = input("Pilih menu (1-5): ")

        if pilihan == '1':
            data = input("Masukkan data: ")
            stack.push(data)

        elif pilihan == '2':
            stack.pop()

        elif pilihan == '3':
            stack.tampilkan()

        elif pilihan == '4':
            stack.monitor_memori()

        elif pilihan == '5':
            print("👋 Keluar dari program.")
            break

        else:
            print("❗ Pilihan tidak valid.\n")


if __name__ == "__main__":
    main()